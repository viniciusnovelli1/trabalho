#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "trabalho.h"

void CriaLista(Lista *L){
  L->inilista = NULL;
  L->fimlista = NULL;
}

void CriaPilha(Pilha *P){
  P->topo = NULL;
}

void CriaFila(Fila *F){
  F->inifila = NULL;
  F->fimfila = NULL;
}

int ListaVazia(Lista *L){
    if (L->inilista == NULL) {
        return 1;
    }
    else {
        return 0;
    }
}

int PilhaVazia(Pilha *P) {
    if (P->topo == NULL) {
        return 1;
    }
    else {
        return 0;
    }
}

int FilaVazia (Fila *F) {
    if (F->inifila == NULL) {
        return 1;
    }
    else {
        return 0;
    }
}

void EsvaziaLista(Lista *L) {
    nolista *li = L->inilista;
    while (li != NULL) {
        L->inilista = li->prox;
        free(li);
        li = L->inilista;
    }
}

void EsvaziaPilha(Pilha *P){
  nopilha *pi = P->topo;

  while(pi != NULL){
    P->topo = pi->prox;
    free(pi);
    pi = P->topo;
  }
}

void EsvaziaFila(Fila *F){
  nofila *fi = F->inifila;

  while(fi != NULL){
    F->inifila = fi->prox;
    free(fi);
    fi = F->inifila;
  }
}

void PrintFila(Fila *F){
    nofila *fi = F->inifila;

    if (FilaVazia(F)) {
        return;
    }
    else {
        while(fi!= NULL) {
            printf("%s; ",fi->nomepessoa);
            fi = fi->prox;
        }
    }
}

void PrintPilha(Pilha *P){
  nopilha *pi = P->topo;

  if(PilhaVazia(P)){
    printf("Nenhum lance cadastrado");
    return;
  } else {
      while (pi != NULL) {
        printf("%f: ",pi->valor);
        PrintFila(pi->users);
        pi=pi->prox;
      }
  }
}

void PrintLista(Lista *L){
  nolista *li = L->inilista;

  if(ListaVazia(L)){
    printf("Nenhum produto cadastrado.\n");
    return;
  } else {
    while(li != NULL){
      if (PilhaVazia(li->lances)) {
          li=li->prox;
      }
      else {
          printf("Lances de %s: \n",li->nomeproduto);
          PrintPilha(li->lances);
          li=li->prox;
      }
    }
  }
}

void EntraLista(Lista *L, char *nome, int *erro){ // Cadastramento de produto na lista (em ordem alfabética).
  nolista *li = (nolista *)malloc(sizeof(nolista));
  nolista *aux = L->inilista;
  int ordnome = -1;

  if(li == NULL){ // Verificação de erro na alocação de memória para nolista.
    *erro = 1;
    return;
  } else {
    *erro = 0;
    strcpy(li->nomeproduto,nome);
    if(ListaVazia(L)){ // Se a lista estiver vazia, apenas colocamos o nolista li como primeiro elemento da lista L.
      L->inilista = li;
      L->fimlista = li;
      li->prox = NULL;
      li->ant = NULL;
      return;
    } else {
      while(ordnome < 0){ // Percorremos a lista comparando os nomes dos produtos
        ordnome = strcmp(aux->nomeproduto,li->nomeproduto);
        if(ordnome > 0){ // Encontrou o lugar onde o nolista li deve ser inserido
            ordnome = 1;
            break;
        }
        if(aux->prox == NULL){ // Chegou até o fim da lista: o nolista li deve ser inserido no fim da lista.
            ordnome = 2;
            break;
        }
        aux = aux->prox;
      }
      if(ordnome == 0){ // Produto já está cadastrado na lista.
      	*erro = 2;
      	return;
      } else {
	  if(L->inilista == aux && ordnome == 1){ // O nolista li deve ser inserido no início da lista.
        L->inilista = li;
        li->prox = aux;
        aux->ant = li;
        li->ant = NULL;
	  } else {
	  if(ordnome == 2){ // O nolista li deve ser inserido no final da lista.
	    li->prox = NULL;
	    li->ant = aux;
	    aux->prox = li;
	    L->fimlista = li;
	  }
	  if(ordnome == 1){ // O nolista li deve ser inserido no meio da lista.
	    li->prox = aux;
	    li->ant = aux->ant;
	    aux->ant->prox = li;
	    aux->ant = li;
	  }
	  }
    }
  }
 }
}

void Push(Pilha *P, float *valor, int *erro){
  nopilha *pi = (nopilha *)malloc(sizeof(nopilha));

  if(pi == NULL){ // Verificação se houve erro na alocação.
    *erro = 1;
    return;
  } else {
    *erro = 0;
    pi->valor = *valor;
    pi->users = NULL;
    if (PilhaVazia(P)) {
        P->topo = pi;
        pi->prox =  NULL;
    } else {
        P->topo->prox = pi;
        P->topo = pi;
        pi->prox = NULL;
    }
    return;
  }
}

void Pop(Pilha *P, float *valor, int *erro){
  nopilha *pi = P->topo;

  if(PilhaVazia(P)){ // Verificação se a pilha P está vazia.
    *erro = 1;
  } else {
    *erro = 0;
    *valor = P->topo->valor;
    P->topo = P->topo->prox;
    free(pi);
  }
}

void EntraFila(Fila *F, char *nome, int *erro){
  nofila *fi = (nofila *)malloc(sizeof(nofila));

  if(fi == NULL){
    *erro = 1;
  } else {
    *erro = 0;
    strcpy(fi->nomepessoa, nome);
    fi->prox = NULL;
    if(F->inifila == NULL){
      F->inifila = fi;
      F->fimfila = fi;
    } else {
      F->fimfila->prox = fi;
      F->fimfila = fi;
    }
  }
}

void CadastrarLance(Lista *L, char *nome, char *prod, float *valor, int *erro){
  nopilha *pi = (nopilha *)malloc(sizeof(nopilha));
  nofila *fi = (nofila *)malloc(sizeof(nofila));
  nolista *li = L->inilista;
  Pilha P;
  int ordnome = 1;

  if(pi == NULL || fi == NULL){ // Verificação se houve erro na alocação de memória.
    *erro = 1;
    return;
  } else {
    *erro = 0;
    while(ordnome != 0){ // Procurando o produto prod na lista de produtos.
      ordnome = strcmp(prod,li->nomeproduto);
      if(li->prox == NULL && ordnome != O){ // Colocamos erro 2 caso não o produto digitado não seja encontrado na lista.
        *erro = 2;
        return;
      }
      if (ordnome == 0) {
        break;
      }
      li=li->prox;
    }
    if (li->lances == NULL) {
        CriaPilha(&P);
        li->lances = &P;
        Push(li->lances,valor,erro);
    }
    else {
        if(li->lances->topo->valor < *valor) {
            Push(li->lances,valor,erro);
            strcopy(fi->nomepessoa,nome);
            EntraFila()
        }
        else {
            *erro = 3;
        }
    }

  }
}
